View(teeth)
rm(teeth)
head(ToothGrowth)
View(ToothGrowth)
library("plyr","dplyr","tidyr","ggplot2")
library("plyr")
library("dplyr")
library("tidyr")
library("ggplot2")
hist(ToothGrowth$len)
tooth_object<-ggplot(ToothGrowth,aes(x=len))
tooth_object<-ggplot(ToothGrowth,aes(x=dose,y=len))
tooth_object + geom_point()
tooth_object + geom_point() + facet_grid(.~supp)
tooth_object + geom_point(aes(colour=supp)) + facet_grid(.~supp)
tooth_object + geom_point(aes(colour=supp)) + facet_grid(.~supp) + xlab("Dose of Supplement") + ylab("Length of Odontoblast") + ggtitle("Plot of dose of supplement against length, split by supplement")
## create plot object
tooth_object<-ggplot(ToothGrowth,aes(x=dose,y=len))
## create plot
tooth_object + geom_point(aes(colour=supp)) + facet_grid(.~supp) + xlab("Dose of Supplement") + ylab("Length of Odontoblast") + ggtitle("Plot of dose of supplement against length, split by supplement") + guide_legend(title="Type of Supplement")
tooth_object + geom_point(aes(colour=supp)) + facet_grid(.~supp) + xlab("Dose of Supplement") + ylab("Length of Odontoblast") + ggtitle("Plot of dose of supplement against length, split by supplement") + guide_legend(title="Type of Supplement")
## create plot object
tooth_object<-ggplot(ToothGrowth,aes(x=dose,y=len))
## create plot
tooth_object + geom_point(aes(colour=supp)) + facet_grid(.~supp) + xlab("Dose of Supplement") + ylab("Length of Odontoblast") + ggtitle("Plot of dose of supplement against length, split by supplement")
## create plot object
tooth_object<-ggplot(ToothGrowth,aes(x=dose,y=len))
## create plot
tooth_object + geom_point(aes(colour=supp)) + facet_grid(.~supp) + xlab("Dose of Supplement") + ylab("Length of Odontoblast") + ggtitle("Plot of dose of supplement against length, split by supplement") + theme(legend.title="Type of Supplement")
## create plot object
tooth_object<-ggplot(ToothGrowth,aes(x=dose,y=len))
## create plot
tooth_object + geom_point(aes(colour=supp)) + facet_grid(.~supp) + xlab("Dose of Supplement") + ylab("Length of Odontoblast") + ggtitle("Plot of dose of supplement against length, split by supplement") + theme(legend.title=element_text("Type of Supplement"))
## create plot object
tooth_object<-ggplot(ToothGrowth,aes(x=dose,y=len))
## create plot
tooth_object + geom_point(aes(colour=supp)) + facet_grid(.~supp) + xlab("Dose of Supplement") + ylab("Length of Odontoblast") + ggtitle("Plot of dose of supplement against length, split by supplement")
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
## 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(runif(40)))
## plot the distribution
hist(plotvalue)
qplot(plotvalue,plotvalue,geom="hist")
library("plyr")
library("dplyr")
library("tidyr")
library("ggplot2")
sim<-ggplot2(plotvalue,aes(x=plotvalue))
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.2/library")
sim<-ggplot2(plotvalue,aes(x=plotvalue))
library("plyr")
library("dplyr")
library("tidyr")
library("ggplot2")
```
sim<-ggplot(plotvalue,aes(x=plotvalue))
sim<-ggplot(plotdata,aes(x=plotdata))
plotdata<-as.data.frame(plotvalue)
sim<-ggplot(plotdata,aes(x=plotdata))
sim + geom_histogram()
sim + geom_histogram(x=plotdata)
sim + geom_line()
View(plotdata)
hist(plotvalue)
?hist
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
p0 = qplot(plotdata, geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density')
print(p0)
p0 = qplot(plotdata, geom = 'blank') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4)
# +
#   scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
#   theme(legend.position = c(0.85, 0.85))
print(p0)
source('~/.active-rstudio-document')
?geom_histogram
source('~/.active-rstudio-document')
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(runif(40)))
## plot the distribution
hist(plotvalue)
plotdata<-as.data.frame(plotvalue)
sim<-ggplot(plotdata,aes(x=plotdata))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
class(plotdata)
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(runif(40)))
## plot the distribution
hist(plotvalue)
plotdata<-as.data.frame(plotvalue)
sim<-ggplot(plotdata,aes(x=plotdata))
sim + geom_histogram(y=...density...)
sim + geom_histogram(aes(y=...density...))
sim<-qplot(plotvalue,geom="blank")
sim + geom_histogram(aes(y=...density...))
sim + geom_histogram(aes(y=..density..))
sim + geom_histogram(aes(y=..density..),alpha=0.5)
sim<-qplot(plotvalue,geom="blank")
## print histogram
sim<-sim + geom_histogram(aes(y=..density..),alpha=0.5)
print(sim)
sim + stat_function(fun = dexp,aes(colour="Exponential"))
print(sim)
sim + stat_function(fun = dnorm,aes(colour="Exponential"))
sim + stat_function(fun = dnorm,aes(colour="Normal"))
print(sim)
sim + stat_function(fun = dnorm,aes(colour="Normal"))
plot(dnorm)
dnorm
?dnorm
sim + stat_function(fun = rnorm,aes(colour="Normal"))
sim + stat_function(fun = pnorm,aes(colour="Normal"))
sim + stat_function(fun = qnorm,aes(colour="Normal"))
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(rexp(40)))
## plot the distribution
hist(plotvalue)
sim<-qplot(plotvalue,geom="blank")
## print histogram
sim<-sim + geom_histogram(aes(y=..density..),alpha=0.5)
print(sim)
## print histogram with a normal distribution
sim + stat_function(fun = qnorm,aes(colour="Normal"))
print(sim)
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(rexp(40)))
## plot the distribution
hist(plotvalue)
# sim<-qplot(plotvalue,geom="blank")
# ## print histogram
# sim<-sim + geom_histogram(aes(y=..density..),alpha=0.5)
# print(sim)
# ## print histogram with a normal distribution
# sim + stat_function(fun = qnorm,aes(colour="Normal"))
# print(sim)
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
lambda = 0.2
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(rexp(40,lambda)))
## plot the distribution
hist(plotvalue)
# sim<-qplot(plotvalue,geom="blank")
# ## print histogram
# sim<-sim + geom_histogram(aes(y=..density..),alpha=0.5)
# print(sim)
# ## print histogram with a normal distribution
# sim + stat_function(fun = qnorm,aes(colour="Normal"))
# print(sim)
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
lambda = 0.2
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(rexp(40,lambda)))
## plot the distribution
hist(plotvalue)
sim<-qplot(plotvalue,geom="blank")
## print histogram
sim<-sim + geom_histogram(aes(y=..density..),alpha=0.5)
print(sim)
## print histogram with a normal distribution
sim + stat_function(fun = qnorm,aes(colour="Normal"))
print(sim)
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
lambda = 0.2
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(rexp(40,lambda)))
## plot the distribution
hist(plotvalue)
sim<-qplot(plotvalue,geom="blank")
## print histogram
sim<-sim + geom_histogram(aes(y=..density..),alpha=0.5)
print(sim)
sim + geom_density()
sim + geom_density(aes(colour="red"))
hist(rexp(40,lambda))
mean_of_exp<-1/lambda
print(mean_of_exp)
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
lambda = 0.2
## plot sample exponential - like the one the mean will be taken from
hist(rexp(40,lambda))
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(rexp(40,lambda)))
## base plot the distribution
hist(plotvalue)
## ggplot distribution
sim<-qplot(plotvalue,geom="blank")
## print histogram
sim<-sim + geom_histogram(aes(y=..density..),alpha=0.5)
sim + geom_density(aes(colour="red"))
## sample mean
sample_mean<-mean(plotvalue)
## mean of exponential - theoretical mean
mean_of_exp<-1/lambda
print(sample_mean)
print(mean_of_exp)
library(swirl)
swirl()
sum(edh*dice_high)
sum(dice_high*dice_sqr)-edh^2
source('~/.active-rstudio-document')
round(pnorm(73, mean = 80, sd = 10) * 100)
round(pnorm(73, mean = 80, sd = 10) * 70)
round(pnorm(70, mean = 80, sd = 10) * 70)
round(pnorm(70, mean = 80, sd = 10) * 80)
?pnorm
?round
pnorm(70, mean = 80, sd = 10)
source('~/.active-rstudio-document')
round(pnorm(70, mean = 80, sd = 10))
round(pnorm(70, mean = 80, sd = 10)*80)
round(pnorm(70, mean = 80, sd = 10)*100)
?pnorm
pnorm(95,1100,75)
dnorm(95,1100,75)
dnorm(.95,1100,75)
qnorm(.95,1100,75)
round(qnorm(.95,1100,75))
rnorm(100,1100,75)
round
qnorm(.95,1100,75/sqrt(100))
?pbinom
pbinom(4, prob = .5, size = 6, lower.tail = FALSE)
pbinom(5, prob = .5, size = 6, lower.tail = FALSE)
round(pbinom(5, prob = .5, size = 6, lower.tail = FALSE)*100)
pbinom(5, prob = .5, size = 6, lower.tail = FALSE)
pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE)
mean(pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE))
mean(pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE))
pnorm(.50, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE)
pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE)
pnorm(.52, mean = 0.5, sd = sqrt(1 / 12 / 1000), lower.tail = FALSE)
ppois(10, lambda = 5 * 3)
rbinom(5,1,0.5)
pbinom(4,5,0.5)
?pbinom
pbinom(4,5,0.5,lower.tail = FALSE)
0.5*0.5*0.5*0.5
0.5*0.5*0.5*0.5*0.5
0.5*0.5*0.5*0.5*0.5 + 0.5*0.5*0.5*0.5
((0.5*0.5*0.5*0.5*0.5) + (0.5*0.5*0.5*0.5))/2
suppressWarnings(library("plyr"))
suppressWarnings(library("dplyr"))
suppressWarnings(("tidyr"))
suppressWarnings(library("ggplot2"))
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
lambda = 0.2
## plot sample exponential - like the one the mean will be taken from
hist(rexp(40,lambda))
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(rexp(40,lambda)))
## base plot the distribution
hist(plotvalue)
## ggplot distribution
sim<-qplot(plotvalue,geom="blank")
## print histogram
sim<-sim + geom_histogram(aes(y=..density..),alpha=0.5)
sim + geom_density(aes(colour="red"))
## sample mean
sample_mean<-mean(plotvalue)
## mean of exponential - theoretical mean
mean_of_exp<-1/lambda
hist(rexp(1000000,lambda))
plot(rexp(1000000,lambda))
hist(rexp(1000000,lambda))
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
lambda = 0.2
## plot sample exponential - like the one the mean will be taken from
hist(rexp(40,lambda))
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(rexp(40,lambda)))
## base plot the distribution
hist(plotvalue)
## ggplot distribution
sim<-qplot(plotvalue,geom="blank")
## print histogram
sim<-sim + geom_histogram(aes(y=..density..),alpha=0.5)
sim + geom_density(aes(colour="red"))
## sample mean
sample_mean<-mean(plotvalue)
## mean of exponential - theoretical mean
mean_of_exp<-1/lambda
var_of_exp<-(1/lambda)^2
var_of_exp
var(plotvalue)
var(plotvalue)/1000
plotvalue
var(plotvalue)
plotvalue*mean_of_exp
plotvalue*mean_of_exp/1000
x<-(plotvalue*mean_of_exp)/1000
x
mean(x)
## create starting point for simulation which will be the data used to create the plot
plotvalue = NULL
lambda = 0.2
## plot sample exponential - like the one the mean will be taken from
hist(rexp(40,lambda))
# 1000 times, create a random exponential distribution and find the median.  Concatenate this into the plotvalue
for (i in 1 : 1000) plotvalue = c(plotvalue, mean(rexp(40,lambda)))
## base plot the distribution
hist(plotvalue)
## ggplot distribution
sim<-qplot(plotvalue,geom="blank")
## print histogram
sim<-sim + geom_histogram(aes(y=..density..),alpha=0.5)
sim + geom_density(aes(colour="red"))
## sample mean
sample_mean<-mean(plotvalue)
## mean of exponential - theoretical mean
mean_of_exp<-1/lambda
var(plotvalue)
var_of  /1000
var_of_exp/1000
var_of_exp<-(1/lambda)^2
var_of_exp/1000
lambda = 0.2
lambda<-0.2
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mns
source('~/.active-rstudio-document')
var(mns)
variance
var(mns)^2
var(mns)^2/1000
sum(mns*5)
sum(mns*5)/1000
sd(mns)
plot(rexp(40,lamda))
plot(rexp(40,lambda))
var(rexp(40,lambda))
var(rexp(40,lambda))
var(rexp(40,lambda))
var(rexp(1000,lambda))
var(rexp(1000,lambda))
var(rexp(1000,lambda))
var(rexp(10000,lambda))
var(rexp(10000,lambda))
var(rexp(10000,lambda))
var(rexp(10000,lambda))
mean(mns)
mean(mns)-mns
(mean(mns)-mns)^2
sum((mean(mns)-mns)^2)
sum((mean(mns)-mns)^2)/1000
mns-mean(mns)
(mns-mean(mns))^2
sum((mns-mean(mns))^2)
sum((mns-mean(mns))^2)/999
mean(mns)*mns
sum(mean(mns)*mns)/999
library(swirl)
swirl()
qnorm(0.95)
c(0.6,-0.6)qnorm(.975)*sqrt(0.6(1-0.6)/100)
qnorm(.975)*sqrt(0.6(1-0.6)/100)
qnorm(.975)
.6+(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
.6+c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x$conf.int
x
binom.test(60,100)
binom.test(60,100)$conf.int
swirl()
library(swirl)
swirl()
.997*.001
(1-.997)*(1-.001)
(1-.985)*(1-0.01)
(1-.985)*(1-0.001)
0.000997/(0.000997+0.002997)
0.000997/(0.000997+(.015*.999))
0.75*.3/((0.75*0.3)+((1-0.75)*(1-.3))
)
top<-.75*.3
middle<-top
bottom<-(1-.52)*(1-.3)
top/(middle+bottom)
setwd("~/GitHub/Statistical Inference/Statistical-Inference")
plot(rexp(100000,lambda))
lambda=0.2
plot(rexp(100000,lambda))
hist(rexp(100000,lambda))
?hist
plot(rnorm(1000))
plot(mean(rnorm(1000))
plot(mean(rnorm(1000)))
?rnorm
test<-rnorm(1000)
plot(test)
?rnorm
source('~/.active-rstudio-document')
plot(function(x) pnorm(x, log.p = TRUE), -50, 10,
main = "log { Normal Cumulative }")
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x <- seq(0, 4, 0.1)
plot(x, dnorm(x, 2, 0.5), type = "l")
?dnorm
dnorm(1000)
rnorm(1000)
hist(rnorm(1000))
hist(rnorm(1000))
abline(5)
?abline
source('~/.active-rstudio-document')
?hlilne
?hline
??hline
plot(c(-2,3), c(-1,5), type = "n", xlab = "x", ylab = "y", asp = 1)
## the x- and y-axis, and an integer grid
abline(h = 0, v = 0, col = "gray60")
abline(h = 2, v = 0, col = "gray60")
lambda=0.2
hist(rexp(100000,lambda))
## mean of exponential is 1/lambda
meanexp<-1/lambda
## STANDARD DEVIATION of exponential is 1/lambda
sdexp<-1/lambda
## expected mean of distribution
## now taking 1000 means from 1000 samples
## expect mean to be close to population mean therefore
expectedmean<-meanexp
## STANDARD DEVIATION of exponential distribution is 1/lambda
sdexp<-1/lambda
## variance of exponential square of sdexp
varexp<-sdexp^2
## expected variance of distribution of mean of samples
expectedvariance<-25/40
## sample normal distribution
hist(rnorm(1000))
## run exp simulation 1000 times and take mean
## create variable and set to null
expmeanvalues<-NULL
## calculate mean of sample of 40 from exponential distribution and append to variable
for (i in 1:1000){expmeanvalues<-c(expmeanvalues,mean(rexp(40,lambda)))}
meansim<-mean(expmeanvalues)
print(meansim)
variancesim<-var(expmeanvalues)
print(variancesim)
hist(expmeanvalues)
abline(v=5)
abline(v=5,colour = "red")
hist(expmeanvalues)
abline(v=5,col = "red")
abline(v=meansim, col="blue")
hist(expmeanvalues)
abline(v=meansim, col="blue")
abline(v=meanexp,col="red")
?density
density(expmeanvalues)
plot(density(expmeanvalues))
library(ggplot2)
hist(expmeanvalues)
abline(v=meansim, col="blue")
abline(v=meanexp,col="red")
object<-ggplot(x=expmeanvalues,data=expmeanvalues)
dat<-as.data.frame(expmeanvalues)
object<-ggplot(x=expmeanvalues,data=dat)
object + geom_point()
object + geom_histogram(stat="identity")
qplot(expmeanvalues,data=dat)
?geom_histogram
object + geom_histogram()
object + geom_histogram(x=expmeanvalues)
object + geom_histogram(aes(x=expmeanvalues))
object + geom_histogram(aes(x=expmeanvalues),binwidth=10)
object + geom_histogram(aes(x=expmeanvalues),binwidth=100)
object + geom_histogram(aes(x=expmeanvalues),binwidth=1000000)
object + geom_histogram(aes(x=expmeanvalues),binwidth=range/10)
?range
range(dat)
8.101135-2.562591
(8.101135-2.562591)/30
object + geom_histogram(aes(x=expmeanvalues),binwidth=0.1846181)
object + geom_histogram(aes(x=expmeanvalues),binwidth=0.1)
object + geom_histogram(aes(x=expmeanvalues),binwidth=0.2)
object + geom_histogram(aes(x=expmeanvalues),binwidth=0.3)
object + geom_histogram(aes(x=expmeanvalues))
object + geom_histogram(aes(x=expmeanvalues)) + geom_vline()
?geom_vline
source('~/.active-rstudio-document')
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p + geom_vline(xintercept = 5)
p + geom_vline(xintercept = 1:5)
p + geom_vline(xintercept = 1:5, colour="green", linetype = "longdash")
p + geom_vline(aes(xintercept = wt))
p + geom_vline(xintercept = 5)
